name: Deploy to AKS

on:
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types:
      - completed

permissions:
  contents: read       # lecture du repo
  id-token: write      # nécessaire pour OIDC Azure

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le repo
      - name: Checkout infra repo
        uses: actions/checkout@v4

      # 2. Connexion à Azure via OIDC (pas besoin de secret JSON)
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3. Installer kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      # 4. Récupérer les credentials du cluster
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group <RESOURCE_GROUP> \
            --name <AKS_CLUSTER_NAME> \
            --overwrite-existing

      # 5. Installer l’ingress si besoin
      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux

      # 6. Attendre l’IP publique de l’ingress
      - name: Wait for ingress IP
        run: |
          echo "Waiting for ingress IP..."
          until [ ! -z "$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do
            sleep 5
          done
          echo "Ingress IP assigned!"

      # 7. Déployer les manifests
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/

      # 8. Vérifier les déploiements
      - name: Check rollout
        run: |
          kubectl rollout status deployment/mysql -n todolist
          kubectl rollout status deployment/backend -n todolist
          kubectl rollout status deployment/frontend -n todolist
